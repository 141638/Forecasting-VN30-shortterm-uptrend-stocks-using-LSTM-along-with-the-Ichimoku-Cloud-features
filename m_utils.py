# -*- coding: utf-8 -*-
"""m_utils

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I7cATp2AxAtXf0Dk7YCG4Uq6KqNgotyE
"""

# import 
# !pip install mplfinance
# import mplfinance as mpf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

from google.colab import drive, files
drive.mount('/content/drive/', force_remount=True)

"""
**Def Functions**"""

#-----------------------------------------------------------------------------
# ---- functions for splitted-trading strategy ----#        
def split_equal(value, times):
    return [round(value // times, 0) + (1 if x < value % times else 0)  for x in range (times)]

def print_yearly_rets(investment, original_asset, invest_asset):
  yearly1 = invest_asset[0]/original_asset[0] - 1
  yearly2 = invest_asset[1]/original_asset[1] - 1 
  yearly3 = invest_asset[2]/original_asset[2] - 1

  total_asset = sum(invest_asset)
  total_year_rets = total_asset/investment - 1
  sign1, sign2, sign3, sign4 = '', '', '', ''
  if float(yearly1) >= 0:
    sign1 = '+'
  if float(yearly2) >= 0:
    sign2 = '+'
  if float(yearly3) >= 0:
    sign3 = '+'    
  if float(total_year_rets) >= 0:
    sign4 = '+'  

  print('Investment: '+str(investment))  
  print('Original Splitted Asset: '+str(original_asset[0])+' - '+str(original_asset[0])+' - '+str(original_asset[0]))
  print('Asset 1('+sign1+str(round(yearly1*100, 2))+'%): '+str(invest_asset[0]))  
  print('Asset 2('+sign2+str(round(yearly2*100, 2))+'%): '+str(invest_asset[1])) 
  print('Asset 3('+sign3+str(round(yearly3*100, 2))+'%): '+str(invest_asset[2]))   
  print('-'*45)
  print('Total Asset ('+sign4+str(round(total_year_rets*100, 3))+'%): '+str(total_asset))

def split_trade_simulation(avg_rets):
  count=0
  investment = 100000000
  original_asset = split_equal(investment, 3)
  invest_asset = np.array(original_asset).astype(float)

  avg_rets['long2'] = avg_rets.iloc[:,1].shift(-1).fillna(0)
  avg_rets['long3'] = avg_rets.iloc[:,1].shift(-2).fillna(0)
  count = 10
  for index, rets in avg_rets.iterrows():
    if count==10:
      invest_asset[0] = invest_asset[0]*(1-0.0015)*(1+rets['Long'])*0.9975
      invest_asset[1] = invest_asset[1]*(1-0.0015)*(1+rets['long2'])*0.9975
      invest_asset[2] = invest_asset[2]*(1-0.0015)*(1+rets['long3'])*0.9975
      count=0
    count+=1  
  print_yearly_rets(investment, original_asset, invest_asset)
#-----------------------------------------------------------------------------  
#-----------------------------------------------------------------------------
# ---- function for single trading strategy ----#   
def single_trade_simulation(avg_rets):
  count=10
  investment = 100000000
  asset = investment
  avg_trade = []
  for index, rets in avg_rets.iterrows():
    if count==10:
      avg_trade.append(rets)
      asset = asset*(1-0.0015)*(1+rets)*0.9975
      count=0
    count+=1         
  yearly_rets = (asset/investment) - 1

  sign = ''
  if float(yearly_rets) >= 0:
      sign = '+'
  print('Asset('+sign+str(round(yearly_rets*100, 2))+'%): '+str(asset))
  return np.mean(avg_trade)       
#-----------------------------------------------------------------------------  
#-----------------------------------------------------------------------------
# ---- function for plotting trading history ----#   
def plot_trade_history(trade_history):
  ax = plt.gca()

  trade_history['invest1'] = trade_history['invest1'] / 1000000
  trade_history['invest2'] = trade_history['invest2'] / 1000000
  trade_history['invest3'] = trade_history['invest3'] / 1000000

  trade_history.plot(kind='line',x='date',y='invest1', label='Invest 1', ax=ax)
  trade_history.plot(kind='line',x='date',y='invest2', label='Invest 2', color='red', ax=ax)
  trade_history.plot(kind='line',x='date',y='invest3', label='Invest 3', color='green', ax=ax)
  
  ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.1f}'))

  plt.xlabel("Date")
  plt.ylabel("Million VND")
  
  plt.show()  

def trading_plot_main(file_name):
  # file_name = '/content/drive/MyDrive/CS Graduation Project/Source Code/Intraday Prediction/pct_ichimoku/result/avg_daily_rets-'
  for year in range(2015, 2021):
    avg_rets = pd.read_csv(file_name+str(year)+'.csv')

    count=0
    investment = 100000000
    original_asset = split_equal(investment, 3)
    invest_asset = np.array(original_asset).astype(float)

    avg_rets['long2'] = avg_rets.iloc[:,1].shift(-1).fillna(0)
    avg_rets['long3'] = avg_rets.iloc[:,1].shift(-2).fillna(0)
    trade_history = pd.DataFrame({}, columns=['date','invest1','invest2','invest3'])
    count = 10
    first_entry = 0
    for index, rets in avg_rets.iterrows():
      if first_entry == 0:
        entry = {'date':[rets['Unnamed: 0']], 'invest1':[invest_asset[0]], 'invest2':[invest_asset[1]], 'invest3':[invest_asset[2]]}
        trade_history = pd.DataFrame(entry, columns=['date','invest1','invest2','invest3'])
        first_entry = 1
      if count==10:
        invest_perc_1 = invest_asset[0]*(1-0.0015)*(1+rets['Long'])*0.9975/invest_asset[0] - 1
        invest_asset[0] = (invest_perc_1+1)*invest_asset[0]
        if rets['long2'] != 0:
          invest_perc_2 = invest_asset[1]*(1-0.0015)*(1+rets['long2'])*0.9975/invest_asset[1] - 1
          invest_asset[1] = (invest_perc_2+1)*invest_asset[1]
        if rets['long3'] != 0:   
          invest_perc_3 = invest_asset[2]*(1-0.0015)*(1+rets['long3'])*0.9975/invest_asset[2] - 1
          invest_asset[2] = (invest_perc_3+1)*invest_asset[2]
        count=1
        new_trade = {'date':rets['Unnamed: 0'], 'invest1':invest_asset[0], 'invest2':invest_asset[1], 'invest3':invest_asset[2]}
        trade_history = trade_history.append(new_trade, ignore_index=True)
      count+=1  

    trade_history.date = pd.to_datetime(trade_history.date) 
    print('======================='+str(year)+'=======================')
    print_yearly_rets(investment, original_asset, invest_asset)
    plot_trade_history(trade_history)

#-----------------------------------------------------------------------------
# ---- Simulate ----#
def simulate(test_data,predictions):
    rets = pd.DataFrame([],columns=['Long'])
    pd_index = pd.DataFrame([],columns=['Index'])
    k = 3 # 10 -> 3
    for day in sorted(predictions.keys()):
        preds = predictions[day]
        test_returns = test_data[test_data[:,0]==day][:,[1,-2]]
        top_preds = predictions[day].argsort()[-k:][::-1] 
        trans_long = test_returns[top_preds]
        rets.loc[day] = [np.mean(trans_long[0:,1])]
        pd_index.loc[day] = trans_long[0,0] +'-'+ trans_long[1,0] +'-'+ trans_long[2,0]

        inyear_index = []
        for i, row in pd_index.iterrows():
          arr = row[0].split('-')
          inyear_index.append(arr[0])
          inyear_index.append(arr[1])
          inyear_index.append(arr[2])  
        count_index = {i:inyear_index.count(i) for i in inyear_index}

    return pd_index, count_index, rets

def daily_indexes(test_data, predictions):
  k = 3
  rets = pd.DataFrame([],columns=['Long'])
  pd_index = pd.DataFrame([],columns=['Index'])
  for day in sorted(predictions.keys()):
    test_returns = test_data[test_data[:,0]==day][:,[1,-2]]
    top_preds = predictions[day].argsort()[-k:][::-1] 
    trans_long = test_returns[top_preds]
    rets.loc[day] = [np.mean(trans_long[0:,1])]
    pd_index.loc[day] = trans_long[0,0] +'-'+ trans_long[1,0] +'-'+ trans_long[2,0]
  return pd_index  
#-----------------------------------------------------------------------------
# ---- Label Creation for t+3 change ----#    
def create_label(df_close,perc=[0.5,0.5]):
    perc = [0.]+list(np.cumsum(perc))
    label = df_close.iloc[:,1:].pct_change(fill_method=None, periods=10).fillna(0)[10:].apply( # periods 0 -> 3
            lambda x: pd.qcut(x.rank(method='first'),perc,labels=False), axis=1)
    label = label.fillna(0)
    return label

#-----------------------------------------------------------------------------
# ---- Normalize ----#
def scalar_normalize(train_data,test_data, norm_type):
    scaler = StandardScaler() if norm_type=='StandardScaler' else RobustScaler()
    scaler.fit(train_data[:,2:-2])
    train_data[:,2:-2] = scaler.transform(train_data[:,2:-2])
    test_data[:,2:-2] = scaler.transform(test_data[:,2:-2])

#-----------------------------------------------------------------------------
# ---- functions for splitted-trading strategy ----#        
def split_equal(value, times):
    return [round(value // times, 0) + (1 if x < value % times else 0)  for x in range (times)]

def print_yearly_rets(investment, original_asset, invest_asset):
  yearly1 = invest_asset[0]/original_asset[0] - 1
  yearly2 = invest_asset[1]/original_asset[1] - 1 
  yearly3 = invest_asset[2]/original_asset[2] - 1

  total_asset = sum(invest_asset)
  total_year_rets = total_asset/investment - 1
  sign1, sign2, sign3, sign4 = '', '', '', ''
  if float(yearly1) >= 0:
    sign1 = '+'
  if float(yearly2) >= 0:
    sign2 = '+'
  if float(yearly3) >= 0:
    sign3 = '+'    
  if float(total_year_rets) >= 0:
    sign4 = '+'  

  print('Investment: '+str(investment))  
  print('Original Splitted Asset: '+str(original_asset[0])+' - '+str(original_asset[0])+' - '+str(original_asset[0]))
  print('Asset 1('+sign1+str(round(yearly1*100, 2))+'%): '+str(invest_asset[0]))  
  print('Asset 2('+sign2+str(round(yearly2*100, 2))+'%): '+str(invest_asset[1])) 
  print('Asset 3('+sign3+str(round(yearly3*100, 2))+'%): '+str(invest_asset[2]))   
  print('-'*45)
  print('Total Asset ('+sign4+str(round(total_year_rets*100, 3))+'%): '+str(total_asset))

def split_trade_simulation(avg_rets):
  count=0
  investment = 100000000
  original_asset = split_equal(investment, 3)
  invest_asset = np.array(original_asset).astype(float)

  avg_rets['long2'] = avg_rets.iloc[:,0].shift(-1).fillna(0)
  avg_rets['long3'] = avg_rets.iloc[:,0].shift(-2).fillna(0)
  count = 10
  for index, rets in avg_rets.iterrows():
    if count==10:
      invest_asset[0] = invest_asset[0]*(1-0.0015)*(1+rets['Long'])*0.9975
      invest_asset[1] = invest_asset[1]*(1-0.0015)*(1+rets['long2'])*0.9975
      invest_asset[2] = invest_asset[2]*(1-0.0015)*(1+rets['long3'])*0.9975
      count=1
    count+=1  
  print_yearly_rets(investment, original_asset, invest_asset)